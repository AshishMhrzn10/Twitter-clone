{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","tweets/create.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","message","send","apitweetFeed","nextUrl","undefined","replace","apitweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apitweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","FeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apitweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b3caf8e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//CSRF TOKEN FOR AJAX\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    const cookies = document.cookie.split(\";\");\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCookie(\"csrftoken\");\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  if (csrftoken) {\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n  xhr.onload = function () {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail;\n      if (detail === \"Authentication credentials were not provided.\") {\n        if(window.location.href.indexOf(\"login\") === -1){\n          window.location.href = \"/login?showLoginRequired=true\";\n        }\n      }\n    }\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({ message: \"Error request\" }, 400);\n  };\n  xhr.send(jsonData);\n}\n","import { backendLookup } from \"../lookup\";\n\nexport function apitweetCreate(newTweet, callback) {\n  backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\n}\n\nexport function apitweetAction(tweetId, action, callback) {\n  const data = {\n    id: tweetId,\n    action: action,\n  };\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\n}\n\nexport function apitweetDetail(tweetId, callback) {\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback);\n}\n\nexport function apitweetFeed(callback, nextUrl) {\n  let endpoint = \"/tweets/feed/\";\n  if (nextUrl !== null && nextUrl !== undefined){\n    endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n  }\n  backendLookup(\"GET\", endpoint, callback);\n}\n\nexport function apitweetList(username, callback, nextUrl) {\n  let endpoint = \"/tweets/\";\n  if (username) {\n    endpoint = `/tweets/?username=${username}`;\n  }\n  if (nextUrl !== null && nextUrl !== undefined){\n    endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n  }\n  backendLookup(\"GET\", endpoint, callback);\n}\n","import React from \"react\";\nimport { apitweetAction } from \"./lookup\";\n\nexport function ActionBtn(props) {\n  const { tweet, action, didPerformAction } = props;\n  const likes = tweet.likes ? tweet.likes : 0;\n  const className = props.className\n    ? props.className\n    : \"btn btn-primary btn-sm\";\n  const actionDisplay = action.display ? action.display : \"Action\";\n\n  const handleActionBackendEvent = (response, status) => {\n    console.log(response, status);\n    if ((status === 200 || status === 201) && didPerformAction) {\n      didPerformAction(response, status);\n    }\n  };\n  const handleClick = (event) => {\n    event.preventDefault();\n    apitweetAction(tweet.id, action.type, handleActionBackendEvent);\n  };\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n  return (\n    <button className={className} onClick={handleClick}>\n      {display}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { apitweetCreate } from \"./lookup\";\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef();\n  const { didTweet } = props;\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweet(response);\n    } else {\n      console.log(response);\n      alert(\"An error occured\");\n    }\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n    apitweetCreate(newVal, handleBackendUpdate);\n    textAreaRef.current.value = \"\";\n  };\n\n  return (\n    <div className={props.className}>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          ref={textAreaRef}\n          required={true}\n          className=\"form-control\"\n          name=\"tweet\"\n        ></textarea>\n        <button type=\"Submit\" className=\"btn btn-primary my-3\">\n          Tweet\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function UserLink(props){\n  const{username} = props\n  \n  const handleUserLink = (event) => {\n    window.location.href = `/profile/${username}/`\n  }\n  return <span className=\"pointer\" onClick={handleUserLink}>\n    {props.children}\n  </span>\n}\n\nexport function UserDisplay(props){\n  const{user, includeFullName} = props\n  const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ${\" \"}` : null\n  return <React.Fragment>\n    {nameDisplay}\n    <UserLink username={user.username}>@{user.username}</UserLink>\n  </React.Fragment>\n}\n\nexport function UserPicture(props){\n  const {user} = props\n  return <UserLink username={user.username}><span className=\"mx-1 px-3 py-2 rounded-circle bg-dark text-white\">\n  {user.username[0]}\n  </span></UserLink>\n}","import React, { useState } from \"react\";\nimport { ActionBtn } from \"./buttons\";\nimport {UserDisplay, UserPicture} from '../profiles'\n\nexport function ParentTweet(props) {\n  const { tweet } = props;\n  return tweet.parent ? \n  <Tweet isRetweet retweeter={props.retweeter} hideActions className={\"\"} tweet={tweet.parent} />\n  : null;\n}\n\nexport function Tweet(props) {\n  const { tweet, didRetweet, hideActions, isRetweet, retweeter } = props;\n  const [actionTweet, setActionTweet] = useState(\n    props.tweet ? props.tweet : null\n  );\n  let className = props.className ? props.className : \"col-10 col-md-6\";\n  className = isRetweet === true ? `${className} p-2 border rounded` : className\n  const path = window.location.pathname;\n  const match = path.match(/(?<tweetid>\\d+)/);\n  const urlTweetId = match ? match.groups.tweetid : -1;\n\n  const isDetail = `${tweet.id}` === `${urlTweetId}`;\n  const handleLink = (event) => {\n    event.preventDefault();\n    window.location.href = `/${tweet.id}/`;\n  };\n\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet);\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet);\n      }\n    }\n  };\n  return (\n    <div className={className}>\n      {isRetweet === true && <div className=\"mb-2\">\n          <span className='small text-muted'>Retweet via <UserDisplay user={retweeter}/></span>\n          </div>}\n      <div className=\"d-flex\">\n        <div className=\"\">\n          <UserPicture user={tweet.user}/>\n        </div>\n\n        <div className=\"col-11\">\n          <div>\n            <p>\n              <UserDisplay includeFullName user={tweet.user}/>\n            </p>\n            <p>{tweet.content}</p>\n            <ParentTweet tweet={tweet} retweeter={tweet.user} />\n          </div>\n\n          <div className=\"btn btn-group px-0\">\n            {actionTweet && hideActions !== true && (\n              <React.Fragment>\n                <ActionBtn\n                  tweet={actionTweet}\n                  didPerformAction={handlePerformAction}\n                  action={{ type: \"like\", display: \"Likes\" }}\n                />\n                <ActionBtn\n                  tweet={actionTweet}\n                  didPerformAction={handlePerformAction}\n                  action={{ type: \"unlike\", display: \"Unlike\" }}\n                />\n                <ActionBtn\n                  tweet={actionTweet}\n                  didPerformAction={handlePerformAction}\n                  action={{ type: \"retweet\", display: \"Retweet\" }}\n                />\n              </React.Fragment>\n            )}\n            {isDetail === true ? null : (\n              <button className=\"btn btn-outline-primary btn-sm\" onClick={handleLink}>\n                View\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { apitweetList } from \"./lookup\";\nimport { Tweet } from \"./detail\";\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [nextUrl, setNextUrl] = useState(null);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n      apitweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if(nextUrl !== null){\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets);\n          setTweets(newTweets);\n        } else {\n          alert(\"There was an error\");\n        }\n      }\n      apitweetList(props.username, handleLoadNextResponse, nextUrl)\n    }\n  }\n  \n  return <React.Fragment>{tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        didRetweet={handleDidRetweet}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-item.id`}\n      />\n    );\n  })}\n  {nextUrl !== null && <button onClick={handleLoadNext} className=\"btn btn-outline-primary\">Load Next</button>}\n  </React.Fragment>\n}\n","import React, { useEffect, useState } from \"react\";\nimport { apitweetFeed } from \"./lookup\";\nimport { Tweet } from \"./detail\";\n\nexport function FeedList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [nextUrl, setNextUrl] = useState(null);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        }\n      };\n      apitweetFeed(handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if(nextUrl !== null){\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets);\n          setTweets(newTweets);\n        } \n      }\n      apitweetFeed(handleLoadNextResponse, nextUrl)\n    }\n  }\n  \n  return <React.Fragment>{tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        didRetweet={handleDidRetweet}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-item.id`}\n      />\n    );\n  })}\n  {nextUrl !== null && <button onClick={handleLoadNext} className=\"btn btn-outline-primary\">Load Next</button>}\n  </React.Fragment>\n}\n","import React, { useState, useEffect } from \"react\";\nimport { TweetsList } from \"./list\";\nimport { Tweet } from \"./detail\";\nimport { TweetCreate } from \"./create\";\nimport { apitweetDetail } from \"./lookup\";\nimport {FeedList} from \"./feed\"\n\nexport function FeedComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n  const canTweet = props.canTweet === \"false\" ? false : true;\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets];\n    tempNewTweets.unshift(newTweet);\n    setNewTweets(tempNewTweets);\n  };\n\n  return (\n    <div className={props.className}>\n      {canTweet === true && (\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\n      )}\n      <FeedList newTweets={newTweets} {...props} />\n    </div>\n  );\n}\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n  const canTweet = props.canTweet === \"false\" ? false : true;\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets];\n    tempNewTweets.unshift(newTweet);\n    setNewTweets(tempNewTweets);\n  };\n\n  return (\n    <div className={props.className}>\n      {canTweet === true && (\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\n      )}\n      <TweetsList newTweets={newTweets} {...props} />\n    </div>\n  );\n}\n\nexport function TweetDetailComponent(props) {\n  const { tweetId } = props;\n  const [didLookup, setDidLookup] = useState(false);\n  const [tweet, setTweet] = useState(null);\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response);\n    } else {\n      alert(\"There was an error finding your tweet.\");\n    }\n  };\n  useEffect(() => {\n    if (didLookup === false) {\n      apitweetDetail(tweetId, handleBackendLookup);\n      setDidLookup(true);\n    }\n  }, [tweetId, didLookup, setDidLookup]);\n  return tweet === null ? null : (\n    <Tweet tweet={tweet} className={props.className} />\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {FeedComponent, TweetsComponent, TweetDetailComponent } from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetFeedEl = document.getElementById(\"tweetme-2-feed\");\nif (tweetFeedEl) {\n  ReactDOM.render(e(FeedComponent, tweetFeedEl.dataset), tweetFeedEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\");\ntweetDetailElements.forEach((container) => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}